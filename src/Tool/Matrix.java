package Tool;

import java.util.Arrays;

public class Matrix {

    /**
     * 求（h，v）位置的余子式
     * @param matrix
     * @param h
     * @param v
     * @return
     */
    public double[][] confactor(double[][] matrix,int h,int v){
        double[][] result = new double[matrix.length - 1][matrix[0].length - 1];
        for (int i = 0;i < result.length;i++){
            if(i < h - 1){
                for (int j = 0;j < result[i].length;j++){
                    if(j < v - 1){
                        result[i][j] = matrix[i][j];
                    }
                    else {
                        result[i][j] = matrix[i][j + 1];
                    }
                }
            }
            else {
                for (int j = 0;j < result[i].length;j++){
                    if(j < v - 1){
                        result[i][j] = matrix[i + 1][j];
                    }
                    else {
                        result[i][j] = matrix[i + 1][j + 1];
                    }
                }
            }
        }

        return result;
    }

    /**
     * 求行列式
     * @param matrix
     * @return
     */
    public double det(double[][] matrix){
        /*
         * 二维矩阵计算
         */
        if(matrix.length == 2) {
            return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
        }
        /*
         * 二维以上的矩阵计算
         */
        double result = 0;
        int num = matrix.length;
        double[] nums = new double[num];
        for(int i = 0; i < matrix.length; i++) {
            if(i % 2 == 0) {
                nums[i] = matrix[0][i] * det(confactor(matrix, 1, i+1));
            }else {
                nums[i] = -matrix[0][i] * det(confactor(matrix, 1, i+1));
            }
        }
        for(int i = 0; i < matrix.length; i++) {
            result += nums[i];
        }

        return result;
    }

    /**
     * 求矩阵的转置
     * @param matrix
     * @return
     */
    public double[][] transpose(double[][] matrix){
        double[][] result = new double[matrix[0].length][matrix.length];
        for (int i = 0;i < matrix.length;i++){
            for (int j = 0;j < matrix[i].length;j++){
                result[j][i] = matrix[i][j];
            }
        }
        return result;
    }

    /**
     * 求矩阵的逆
     * @param matrix
     * @return
     */
    public double[][] inverse(double[][] matrix){
        double[][] result = new double[matrix.length][matrix[0].length];

        double detA = det(matrix);

        for(int i = 0; i < matrix.length; i++) {
            for(int j = 0; j < matrix[0].length; j++) {
                if((i + j) % 2 == 0) {
                    result[i][j] = det(confactor(matrix, i+1, j+1)) / detA;
                }else {
                    result[i][j] = -det(confactor(matrix, i+1, j+1)) / detA;
                }

            }
        }
        result = transpose(result);

        return result;
    }

    /**
     * 矩阵的加法
     * @param matrix1
     * @param matrix2
     * @return
     */
    public double[][] add(double[][] matrix1,double[][] matrix2){
        int m1 = matrix1.length;
        int n1 = matrix1[0].length;
        int m2 = matrix2.length;
        int n2 = matrix2[0].length;
        if(m1 != m2 || n1 != n2){
            return null;
        }
        else {
            double[][] result = new double[m1][n1];

            for (int i = 0;i < m1;i++){
                for(int j = 0; j < n1;j++){
                    result[i][j] = matrix1[i][j] + matrix2[i][j];
                }
            }

            return result;
        }
    }

    /**
     * 矩阵的减法
     * @param matrix1
     * @param matrix2
     * @return
     */
    public double[][] subtract(double[][] matrix1,double[][] matrix2){
        int m1 = matrix1.length;
        int n1 = matrix1[0].length;
        int m2 = matrix2.length;
        int n2 = matrix2[0].length;
        if(m1 != m2 || n1 != n2){
            return null;
        }
        else {
            double[][] result = new double[m1][n1];

            for (int i = 0;i < m1;i++){
                for(int j = 0; j < n1;j++){
                    result[i][j] = matrix1[i][j] - matrix2[i][j];
                }
            }

            return result;
        }
    }

    /**
     * 矩阵的数量乘法（数乘）
     * @param matrix
     * @param a
     * @return
     */
    public double[][] scalarMult(double[][] matrix,double a){
        double[][] result = new double[matrix.length][matrix[0].length];

        for (int i = 0;i < matrix.length;i++){
            for (int j = 0;j < matrix[i].length;j++){
                result[i][j] = a * matrix[i][j];
            }
        }

        return result;
    }

    /**
     * 矩阵的向量乘法
     * @param matrix1
     * @param matrix2
     * @return
     */
    public double[][] vectorMult(double[][] matrix1,double[][] matrix2){
        int m1 = matrix1.length;
        int n1 = matrix1[0].length;
        int m2 = matrix2.length;
        int n2 = matrix2[0].length;

        // 第一个矩阵的列数不等于第二个矩阵的行数时矩阵的乘法无意义
        if(n1 != m2){
            return null;
        }
        else {
            double[][] result = new double[m1][n2];

            for (int i = 0;i < m1;i++){
                for (int j = 0;j < n2;j++){
                    for (int k = 0;k < n1;k++){
                        result[i][j] += matrix1[i][k] * matrix2[k][j];
                    }
                }
            }

            return result;
        }
    }

    /**
     * 求邻接矩阵的入度
     * @param matrix
     * @return
     */
    public double[] inDegree(double[][] matrix){
        int len = matrix.length;
        double[] result = new double[len];

        for (int i = 0;i < len;i++){
            double degree = 0.0;// 入度
            for (int j = 0;j<matrix[i].length;j++){
                if(matrix[j][i] != 0.0){// 遍历到非0元素则入度+1
                    degree++;
                }
            }
            result[i] = degree;
        }

        return result;
    }

    /**
     * 求邻接矩阵的出度
     * @param matrix
     * @return
     */
    public double[] outDegree(double[][] matrix){
        int len = matrix.length;
        double[] result = new double[len];

        for (int i = 0;i < len;i++){
            double degree = 0.0;// 出度
            for (int j = 0;j < matrix[i].length;j++){
                if(matrix[i][j] != 0.0){// 遍历到非0元素则出度+1
                    degree++;
                }
            }
            result[i] = degree;
        }

        return result;
    }

    public static void main(String[] args) {
        Matrix matrix = new Matrix();
        //double[][] a = {
        //        {0,1,0,1,1,0,0},
        //        {1,0,1,0,0,0,0},
        //        {0,1,0,0,0,1,1},
        //        {1,0,0,0,0,0,0},
        //        {1,0,0,0,0,0,0},
        //        {0,0,1,0,0,0,0},
        //        {0,0,1,0,0,0,0}
        //};
        double[][] a = {
                {0,1,0,3,1,1,2,1,2,3,1,3,2,1,0,2,3,2,1,3},
                {1,0,0,1,2,1,1,0,1,2,0,1,1,1,0,1,1,1,1,1},
                {0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {3,1,0,0,2,1,1,2,2,4,1,4,2,1,1,2,3,2,1,3},
                {1,2,1,2,0,1,1,1,2,3,0,3,1,1,1,1,1,1,1,1},
                {1,1,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1},
                {2,1,0,1,1,1,0,1,1,2,1,2,2,1,0,2,2,1,1,2},
                {1,0,0,2,1,0,1,0,2,0,2,1,1,1,0,1,2,2,1,2},
                {2,1,0,2,2,1,1,2,0,1,4,2,2,1,1,2,3,2,1,3},
                {3,2,0,4,3,1,2,0,1,0,1,1,1,0,0,1,1,0,0,1},
                {1,0,0,1,0,0,1,2,4,1,0,2,1,1,1,2,3,2,1,3},
                {3,1,1,4,3,1,2,1,2,1,2,0,1,0,2,2,2,1,1,2},
                {2,1,0,2,1,1,2,1,2,1,1,1,0,1,0,1,1,1,1,1},
                {1,1,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1},
                {0,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0},
                {2,1,0,2,1,1,2,1,2,1,2,2,1,1,0,0,2,1,1,2},
                {3,1,0,3,1,1,2,2,3,1,3,2,1,1,0,2,0,2,1,3},
                {2,1,0,2,1,1,1,2,2,0,2,1,1,1,0,1,2,0,1,2},
                {1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1},
                {3,1,0,3,1,1,2,2,3,1,3,2,1,1,0,2,3,2,1,0}
        };
        double[][] aa = {
                {1.2613,0.1590,0.0161,0.3661,0.2116,0.1451,0.2456,0.1947,0.3098,0.2663,0.2408,0.3256,0.2214,0.1405,0.0534,0.2577,0.3413,0.2390,0.1500,0.3413},
                {0.1590,1.0690,0.0091,0.1710,0.1510,0.0893,0.1242,0.0815,0.1539,0.1515,0.1029,0.1509,0.1124,0.0859,0.0264,0.1289,0.1556,0.1188,0.0903,0.1556},
                {0.0161,0.0091,1.0026,0.0189,0.0417,0.0075,0.0118,0.0098,0.0159,0.0127,0.0120,0.0449,0.0099,0.0064,0.0053,0.0125,0.0153,0.0107,0.0077,0.0153},
                {0.3661,0.1710,0.0189,1.3117,0.2571,0.1546,0.2354,0.2344,0.3326,0.3085,0.2589,0.3743,0.2343,0.1490,0.0873,0.2739,0.3622,0.2540,0.1599,0.3622},
                {0.2116,0.1510,0.0417,0.2571,1.1359,0.1116,0.1611,0.1411,0.2309,0.2150,0.1465,0.2557,0.1451,0.1063,0.0685,0.1688,0.2070,0.1546,0.1137,0.2070},
                {0.1451,0.0893,0.0075,0.1546,0.1116,1.0537,0.1140,0.0741,0.1411,0.1119,0.0937,0.1374,0.1039,0.0805,0.0233,0.1190,0.1434,0.1105,0.0845,0.1434},
                {0.2456,0.1242,0.0118,0.2354,0.1611,0.1140,1.1393,0.1486,0.2147,0.1890,0.1821,0.2321,0.1771,0.1114,0.0377,0.2034,0.2439,0.1623,0.1182,0.2439},
                {0.1947,0.0815,0.0098,0.2344,0.1411,0.0741,0.1486,1.1129,0.2254,0.1152,0.1986,0.1862,0.1357,0.1035,0.0352,0.1601,0.2273,0.1794,0.1089,0.2273},
                {0.3098,0.1539,0.0159,0.3326,0.2309,0.1411,0.2147,0.2254,1.2603,0.2063,0.3241,0.2987,0.2188,0.1424,0.0824,0.2569,0.3429,0.2425,0.1511,0.3429},
                {0.2663,0.1515,0.0127,0.3085,0.2150,0.1119,0.1890,0.1152,0.2063,1.1439,0.1683,0.2092,0.1484,0.0808,0.0395,0.1718,0.2115,0.1302,0.0869,0.2115},
                {0.2408,0.1029,0.0120,0.2589,0.1465,0.0937,0.1821,0.1986,0.3241,0.1683,1.1861,0.2535,0.1634,0.1218,0.0727,0.2227,0.2997,0.2109,0.1292,0.2997},
                {0.3256,0.1509,0.0449,0.3743,0.2557,0.1374,0.2321,0.1862,0.2987,0.2092,0.2535,1.2398,0.1860,0.1080,0.1099,0.2471,0.3022,0.2036,0.1441,0.3022},
                {0.2214,0.1124,0.0099,0.2343,0.1451,0.1039,0.1771,0.1357,0.2188,0.1484,0.1634,0.1860,1.1083,0.1028,0.0340,0.1590,0.1963,0.1481,0.1083,0.1963},
                {0.1405,0.0859,0.0064,0.1490,0.1063,0.0805,0.1114,0.1035,0.1424,0.0808,0.1218,0.1080,0.1028,1.0524,0.0221,0.1179,0.1438,0.1122,0.0847,0.1438},
                {0.0534,0.0264,0.0053,0.0873,0.0685,0.0233,0.0377,0.0352,0.0824,0.0395,0.0727,0.1099,0.0340,0.0221,1.0159,0.0425,0.0545,0.0381,0.0253,0.0545},
                {0.2577,0.1289,0.0125,0.2739,0.1688,0.1190,0.2034,0.1601,0.2569,0.1718,0.2227,0.2471,0.1590,0.1179,0.0425,1.1588,0.2608,0.1744,0.1251,0.2608},
                {0.3413,0.1556,0.0153,0.3622,0.2070,0.1434,0.2439,0.2273,0.3429,0.2115,0.2997,0.3022,0.1963,0.1438,0.0545,0.2608,1.2656,0.2454,0.1526,0.3481},
                {0.2390,0.1188,0.0107,0.2540,0.1546,0.1105,0.1623,0.1794,0.2425,0.1302,0.2109,0.2036,0.1481,0.1122,0.0381,0.1744,0.2454,1.1361,0.1181,0.2454},
                {0.1500,0.0903,0.0077,0.1599,0.1137,0.0845,0.1182,0.1089,0.1511,0.0869,0.1292,0.1441,0.1083,0.0847,0.0253,0.1251,0.1526,0.1181,1.0597,0.1526},
                {0.3413,0.1556,0.0153,0.3622,0.2070,0.1434,0.2439,0.2273,0.3429,0.2115,0.2997,0.3022,0.1963,0.1438,0.0545,0.2608,0.3481,0.2454,0.1526,1.2656}
        };
        double[][] a1={
                {0,1,1,1,0},
                {1,0,1,1,1},
                {1,1,0,1,1},
                {1,1,1,0,0},
                {0,1,1,0,0},
        };
        double b[][] = matrix.scalarMult(aa,0.97);

        for (int i = 0;i < b.length;i++) {
            for (int j = 0; j < b[i].length; j++) {
                System.out.print(b[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();

        double[][] D = {
                {3,0,0,0,0,0,0},
                {0,2,0,0,0,0,0},
                {0,0,3,0,0,0,0},
                {0,0,0,1,0,0,0},
                {0,0,0,0,1,0,0},
                {0,0,0,0,0,1,0},
                {0,0,0,0,0,0,1}
        };
        double[][] D1 = {
                {1.7142857142857142,0,0,0,0,0,0},
                {0,1.7142857142857142,0,0,0,0,0},
                {0,0,1.7142857142857142,0,0,0,0},
                {0,0,0,1.7142857142857142,0,0,0},
                {0,0,0,0,1.7142857142857142,0,0},
                {0,0,0,0,0,1.7142857142857142,0},
                {0,0,0,0,0,0,1.7142857142857142}
        };
        //double[][] D2 = matrix.add(D,D1);
        //double[][] iD = matrix.inverse(D);
        //double[][] b1 = matrix.vectorMult(b,iD);
        double[][] I = {
                {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        };
        double[][] I1 = {
                {1,0,0,0,0},
                {0,1,0,0,0},
                {0,0,1,0,0},
                {0,0,0,1,0},
                {0,0,0,0,1}
        };
        double[][] c = matrix.subtract(I,b);
        for (int i = 0;i < c.length;i++) {
            for (int j = 0; j < c[i].length; j++) {
                System.out.print(c[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();

        double[][] d = matrix.inverse(c);
        for (int i = 0;i < d.length;i++) {
            for (int j = 0; j < d[i].length; j++) {
                System.out.print(d[i][j]);
            }
            System.out.println();
        }
        System.out.println();

        double[][] e = matrix.scalarMult(d,0.85);
        for (int i = 0;i < e.length;i++) {
            for (int j = 0; j < e[i].length; j++) {
                System.out.print(e[i][j]);
            }
            System.out.println();
        }
        System.out.println();

        double[][] J = {
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1},
                {1}
        };
        double[][] J1 = {
                {1},
                {1},
                {1},
                {1},
                {1}
        };
        double[][] f = matrix.vectorMult(e,J);
        for (int i = 0;i < f.length;i++) {
            for (int j = 0; j < f[i].length; j++) {
                System.out.print(f[i][j]);
            }
            System.out.println();
        }
        System.out.println();

        //double abcd = 12.0/7.0;
        //System.out.println(abcd);
        double[][] aaa = {
                {1.2195,  	0.1829 ,  	0.1829   ,	0.1829   ,	0.1829   ,	0.1829   ,	0.1829   ,	0.1829  , 	0.1829},
                {0.1829   ,	1.0274 ,  	0.0274  , 	0.0274  , 	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274},
                {0.1829   ,	0.0274  , 	1.0274  , 	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274},
                {0.1829   ,	0.0274  , 	0.0274   ,	1.0274  , 	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274},
                {0.1829   ,	0.0274  , 	0.0274   ,	0.0274   ,	1.0274   ,	0.0274   ,	0.0274   ,	0.0274  , 	0.0274},
                {0.1829   ,	0.0274   ,	0.0274  , 	0.0274   ,	0.0274   ,	1.0274   ,	0.0274   ,	0.0274  , 	0.0274},
                {0.1829   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	1.0274   ,	0.0274   ,	0.0274},
                {0.1829   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,  1.0274   ,	0.0274},
                {0.1829   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	0.0274   ,	1.0274}
        };
        double[][] aaaa = matrix.scalarMult(aaa,0.85);
        for (int i = 0;i < aaaa.length;i++) {
            for (int j = 0; j < aaaa[i].length; j++) {
                System.out.print(aaaa[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}
